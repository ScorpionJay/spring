<?xml version="1.0" encoding="UTF-8"?>
<bean:beans
	xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<!--
	Applies to root appContext beans only, for MVC Controllers is this declaration repeated in MVC config.
	Actually, we currently don't need this as we have on annotation outside of MVC.
	There is more here that can go wrong. If you use interface-based proxy (our demo uses CGLib), you may
	need to add proxy-target-class="true" as well. Book "Spring Security 3.1", Chapter 10, Fine-grained
	Access Control, from header "Method security on Spring MVC controllers" on discusses these topics.
	-->
	<global-method-security secured-annotations="enabled"/>

	<http realm="Protected API"
		use-expressions="true"
		create-session="stateless"
		entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="restAuthenticationManager">

		<!--
		Added after moving to Spring Boot 1.3 + Spring Security 4.x,
		otherwise we could not login with basic auth because of: Expected CSRF token not found
		TODO: Please, mind, that I did not migrate this XML to Spring Security 4.x except for this element
		-->
		<csrf disabled="true"/>

		<!--
		This is not easily possible, because it causes:
		DEBUG o.s.s.w.a.ExceptionTranslationFilter - Authentication exception occurred; redirecting to authentication entry point
		org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext
		-->
		<!--<anonymous enabled="false"/>-->
		<custom-filter ref="restAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
		<intercept-url pattern="/*" access="permitAll"/>
		<intercept-url pattern="/inverst" access="permitAll"/>
		<intercept-url pattern="/secure/**" access="isFullyAuthenticated()"/>
		<intercept-url pattern="/*/account/**" access="isFullyAuthenticated()"/>
		<intercept-url pattern="/*/file/save" access="isFullyAuthenticated()"/>
	</http>

	<bean:bean id="unauthorizedEntryPoint" class="com.one.main.restsec.UnauthorizedEntryPoint"/>

	<bean:bean id="userDetailService" class="com.one.main.secimpl.MyUserDetailsService"/>

	<authentication-manager id="restAuthenticationManager">
		<authentication-provider user-service-ref="userDetailService">
			<!--
			Default password encoder is PlaintextPasswordEncoder, which fits with our hardcoded users.
			Obviously not a good choice otherwise.
			-->
		</authentication-provider>
	</authentication-manager>

	<bean:bean id="tokenManager" class="com.one.main.secimpl.TokenManagerSingle"/>

	<bean:bean id="authenticationService" class="com.one.main.secimpl.AuthenticationServiceDefault"
		c:authenticationManager-ref="restAuthenticationManager" c:tokenManager-ref="tokenManager"/>

	<bean:bean id="restAuthenticationFilter" class="com.one.main.restsec.TokenAuthenticationFilter"
		c:authenticationService-ref="authenticationService" c:logoutLink="/logout"/>
</bean:beans>